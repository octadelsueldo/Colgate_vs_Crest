fventas.colgate = forecast(fit1.Colgate, h = 16)
plot(fventas.colgate)
summary(fit1.Colgate)
#ARIMA MODEL Automatic
fit1.Colgate = auto.arima(oVentasColgate) #cuando le ponemos autoarima estima el modelo ruido blanco.
fit2.Colgate = auto.arima(oVentasColgate, lambda = 0) #con transformacion logaritmo neperiano
fit3.Colgate = auto.arima(oVentasColgate, lambda = 0, approximation = F, stepwise = F)
fit4.Colgate = auto.arima(oVentasColgate, ic = 'aic', trace = T)
summary(fit1.Colgate, fit2.Colgate, fit3.Colgate, fit4.Colgate)
#Forecast de Crest
fventas.crest = forecast(fit1, h=16)
plot(fventas.crest)
#Forecast de Colgate
fventas.colgate = forecast(fit1.Colgate, h = 16)
plot(fventas.colgate)
detectAO(fit1) #Outlier en 135/136/138
library(here) # Comentarios [//]:
library(dplyr)
library(janitor) # Limpieza de nombres
library(skimr) # Summary lindo
library(magrittr) #  %<>%
library(corrplot) # Grafico de correlaciones
library(ggcorrplot)  # Correlaciones con ggplot
library(PerformanceAnalytics) # Otra correlación
library(imputeTS) # na_mean() reemplaza nulos por la media
library(broom) # Modelos en df
library(flextable) # Tablas formateadas
library(mgcv) # Estimaciones GAM
library(reshape2) # Melt DF
library(prettydoc)
library(ggplot2)
library(forecast)
library(zoo)
detectAO(fit1) #Outlier en 135/136/138
#Plot boxplot
#coredata() xts to vector
gData.Crest=data.frame(Date=time(fit1$residuals), fit1$residuals, check.names=FALSE, row.names=NULL)
gData.Colgate=data.frame(Date=time(fit1.Colgate$residuals), fit1.Colgate$residuals, check.names=FALSE, row.names=NULL)
#Boxplot de Crest
ggplot(gData.Crest) + geom_boxplot(aes(x = is.numeric(fit1$residuals), y = fit1$residuals),
outlier.colour="red", outlier.shape=16,outlier.size=2)+
xlab("")+ggtitle("Boxplot de Crest")
#Boxplot de Colgate
ggplot(gData.Colgate) + geom_boxplot(aes(x = is.numeric(fit1.Colgate$residuals), y = fit1.Colgate$residuals),
outlier.colour="red", outlier.shape=16,outlier.size=2)+
xlab("")+ggtitle("Boxplot de Colgate")
library(here) # Comentarios [//]:
library(dplyr)
library(janitor) # Limpieza de nombres
library(skimr) # Summary lindo
library(magrittr) #  %<>%
library(corrplot) # Grafico de correlaciones
library(ggcorrplot)  # Correlaciones con ggplot
library(PerformanceAnalytics) # Otra correlación
library(imputeTS) # na_mean() reemplaza nulos por la media
library(broom) # Modelos en df
library(flextable) # Tablas formateadas
library(mgcv) # Estimaciones GAM
library(reshape2) # Melt DF
library(prettydoc)
library(ggplot2)
library(forecast)
library(zoo)
library(openxlsx)
library(xts)
library(ggfortify) #Plot Monthplot
install.packages("ggfortidy")
library(here) # Comentarios [//]:
library(dplyr)
library(janitor) # Limpieza de nombres
library(skimr) # Summary lindo
library(magrittr) #  %<>%
library(corrplot) # Grafico de correlaciones
library(ggcorrplot)  # Correlaciones con ggplot
library(PerformanceAnalytics) # Otra correlación
library(imputeTS) # na_mean() reemplaza nulos por la media
library(broom) # Modelos en df
library(flextable) # Tablas formateadas
library(mgcv) # Estimaciones GAM
library(reshape2) # Melt DF
library(prettydoc)
library(ggplot2)
library(forecast)
library(zoo)
library(openxlsx)
library(xts)
library(ggfortify) #Plot Monthplot
library(here) # Comentarios [//]:
library(dplyr)
library(janitor) # Limpieza de nombres
library(skimr) # Summary lindo
library(magrittr) #  %<>%
library(corrplot) # Grafico de correlaciones
library(ggcorrplot)  # Correlaciones con ggplot
library(PerformanceAnalytics) # Otra correlación
library(imputeTS) # na_mean() reemplaza nulos por la media
library(broom) # Modelos en df
library(flextable) # Tablas formateadas
library(mgcv) # Estimaciones GAM
library(reshape2) # Melt DF
library(prettydoc)
library(ggplot2)
library(forecast)
library(zoo)
library(openxlsx)
library(xts)
library(TSA)
library(here) # Comentarios [//]:
library(dplyr)
library(janitor) # Limpieza de nombres
library(skimr) # Summary lindo
library(magrittr) #  %<>%
library(corrplot) # Grafico de correlaciones
library(ggcorrplot)  # Correlaciones con ggplot
library(PerformanceAnalytics) # Otra correlación
library(imputeTS) # na_mean() reemplaza nulos por la media
library(broom) # Modelos en df
library(flextable) # Tablas formateadas
library(mgcv) # Estimaciones GAM
library(reshape2) # Melt DF
library(prettydoc)
library(ggplot2)
library(forecast)
library(zoo)
library(openxlsx)
library(xts)
library(lmtest)
library(Hmisc)
library(astsa)
install.packages("astsa")
library(astsa)
detectAO(fit1) #Outlier en 135/136/138
install.packages("TSA")
library(TSA)
detectAO(fit1) #Outlier en 135/136/138
detectIO(fit1) #Nada
checkresiduals(fit1)
detectAO(fit1.Colgate)
detectIO(fit1.Colgate)
checkresiduals(fit1.Colgate)
detectAO(fit1) #Outlier en 135/136/138
detectIO(fit1) #Nada
checkresiduals(fit1) #observamos los residuos
#ARIMAX Crest
crest.arimax = arimax(oVentasCrest,
order = c(0, 1, 1), #orden del ARIMA
xtransf = data.frame(primero = 1*(seq(oVentasCrest) >= 135)), #matriz con 1 donde haya outliers y 0 en lo demás
transfer = list(c(0,0)), #porque p=0
method = 'ML')#Maxima verosimilitud
summary(crest.arimax)
View(fit1)
coeftest(crest.arimax)
library(aTSA)
install.packages("aTSA")
library(aTSA)
library(Hmisc)
crest_134 <- window(cuotaCrest, end=134) #ventas, nos quedamos con los 134 primeros porque a partir del 135 la cosa cambia
crest_134 <- window(ventasCrest, end=134) #ventas, nos quedamos con los 134 primeros porque a partir del 135 la cosa cambia
crest_134_D <- diff(crest_134) # para hacerlas estacionarias usamos diff
library(dynlm)
install.packages("dynlm")
library(dynlm)
#ARIMAX Crest
crest.arimax = arimax(oVentasCrest,
order = c(0, 1, 1), #orden del ARIMA
xtransf = data.frame(primero = 1*(seq(oVentasCrest) >= 135)), #matriz con 1 donde haya outliers y 0 en lo demás
transfer = list(c(0,0)), #porque p=0
method = 'ML')#Maxima verosimilitud
summary(crest.arimax)
#ARIMAX Crest
crest.arimax = arimax(oVentasCrest,
order = c(0, 1, 1), #orden del ARIMA
xtransf = data.frame(primero = 1*(seq(oVentasCrest) >= 135)), #matriz con 1 donde haya outliers y 0 en lo demás
transfer = list(c(0,0)), #porque p=0
method = 'ML')#Maxima verosimilitud
summary(crest.arimax)
#ARIMAX Colgate
colgate.arimax = arimax(oVentasColgate, order = c(0, 1, 1),
xtransf = data.frame(first = 1*(seq(oVentasColgate) >= 135)),
transfer = list(c(0,0)),
method = 'ML')#Maxima verosimilitud
coeftest(crest.arimax)
coeftest(colgate.arimax)
crest_134 <- window(ventasCrest, end=134) #ventas, nos quedamos con los 134 primeros porque a partir del 135 la cosa cambia
colgate_134 <- window(cuotaColgate, end=134) #lead es publicidad, 140 primeros
colgate_134 <- window(ventasColgate, end=134) #lead es publicidad, 140 primeros
crest_134_D <- diff(crest_134) # para hacerlas estacionarias usamos diff
colgate_134_D <- diff(colgate_134) # quitarle la media es indiferente, con usar diff sobra
library(dynlm)
mod0 <- arimax(colgate_134_D,
order=c(0,1,1),
include.mean=TRUE,
xtransf=crest_134_D,
transfer=list(c(0,0)), #funcion de transferencia con orden 15 numerador
method="ML")
mod0
summary(mod0)
coeftest(mod0)
tsdisplay(mod0$residuals) # no es ruido blanco, falta algo en el modelo
plot(mod0$coef[2:15], type = 'h', main = "Efecto de los 15 retardos")
mod <- arimax(colgate_134_D, #MODELO DE FUNCION DE TRANSFERENCIA que incluye la relacion dinamica de x e y, donde la x es el impulso
order=c(0,1,1), #media movil 1
include.mean=TRUE, #la constante
fixed=c(NA,NA,0,0,NA),
xtransf=crest_134_D,
transfer=list(c(1,2)), #el 1 se debe a polinomio 1 denominador, polinomio 3 numerador
method="ML")
View(mod)
summary(mod)
library(tsoutliers)
install.packages("tsoutliers")
library(tsoutliers)
(colgate_outlier <- tso(oVentasColgate, types = c("TC", "AO", "LS", "IO", "SLS")))
colgate <- ts(data$Colgate, start = 1958, frequency = 52)
crest <- ts(data$Crest, start = 1958, frequency = 52)
mydata <- ts(data[,c(3,4)], start = 1958, frequency = 52)
library(fpp2)
install.packages("fpp2")
library(fpp2)
autoplot(colgate) +
ggtitle("Colgate Market Shares") +
xlab("Week") +
ylab("Market Share")
autoplot(crest) +
ggtitle("Crest Market Shares") +
xlab("Week") +
ylab("Market Share")
autoplot(mydata, facets = TRUE)
autoplot(mydata, facets = FALSE) +
ggtitle("Cuotas de mercado de Crest y Colgate") +
xlab("Tiempo") +
ylab("Cuota de mercado")
set.seed(12345)
colgate_training <-  window(colgate, start = 1958,end = c(1962, 52))
crest_training <- window(crest, start = 1958, c(1962, 52))
colgate_test <- window(colgate, start = 1963)
crest_test <- window(crest, start = 1963)
training_data <- data[1:260,]
(colgate_outlier <- tso(colgate_training, types = c("TC", "AO", "LS", "IO", "SLS")))
plot(colgate_outlier)
summary(colgate_outlier)
(crest_outlier <- tso(crest_training, types = c("TC", "AO", "LS", "IO", "SLS")))
plot(crest_outlier)
summary(crest_outlier)
(outliers_colgate_idx <- colgate_outlier$outliers$ind)
(outliers_crest_idx <- crest_outlier$outliers$ind)
#ARIMAX Crest
arimax_model_crest <- arimax(crest_training,
order = c(0,1,1), #orden del ARIMA
xtransf = data.frame(I1 = (1*(seq(crest_training) == outliers_crest_idx))),  #matriz con 1 donde haya outliers y 0 en lo demás
transfer = list(c(0,0)), #porque p=0
method = 'ML')
summary(arimax_model_crest)
#ARIMAX Colgate
arimax_model_colgate <- arimax(colgate_training,
order = c(0,1,1), #orden del ARIMA
xtransf = data.frame(I1 = (1*(seq(crest_training) == outliers_colgate_idx))),  #matriz con 1 donde haya outliers y 0 en lo demás
transfer = list(c(0,0)), #porque p=0
method = 'ML')
summary(arimax_model_crest)
#ARIMAX Crest
arimax_model_crest <- arimax(crest_training,
order = c(0,1,1), #orden del ARIMA
xtransf = data.frame(I1 = (1*(seq(crest_training) == outliers_crest_idx))),  #matriz con 1 donde haya outliers y 0 en lo demás
transfer = list(c(0,0)), #porque p=0
method = 'ML')
summary(arimax_model_crest)
coeftest(arimax_model_crest)
coeftest(arimax_model_colgate)
#ARIMAX Crest
arimax_model_crest <- arimax(crest_training,
order = c(0,1,1), #orden del ARIMA
xtransf = data.frame(I1 = (1*(seq(crest_training) == outliers_crest_idx))),  #matriz con 1 donde haya outliers y 0 en lo demás
transfer = list(c(0,0)), #porque p=0
method = 'ML')
summary(arimax_model_crest)
library(aTSA)
library(Hmisc)
crest_135 <- window(ventasCrest, end=135) #ventas, nos quedamos con los 134 primeros porque a partir del 135 la cosa cambia
colgate_135 <- window(ventasColgate, end=135) #lead es publicidad, 140 primeros
crest_135_D <- diff(crest_135) # para hacerlas estacionarias usamos diff
colgate_135_D <- diff(colgate_135) # quitarle la media es indiferente, con usar diff sobra
library(dynlm)
mod0 <- arimax(colgate_135_D,
order=c(0,1,1),
include.mean=TRUE,
xtransf=crest_135_D,
transfer=list(c(0,0)), #funcion de transferencia con orden 15 numerador
method="ML")
mod0
summary(mod0)
coeftest(mod0)
tsdisplay(mod0$residuals) # no es ruido blanco, falta algo en el modelo
plot(mod0$coef[2:15], type = 'h', main = "Efecto de los 15 retardos")
mod <- arimax(colgate_135_D, #MODELO DE FUNCION DE TRANSFERENCIA que incluye la relacion dinamica de x e y, donde la x es el impulso
order=c(0,1,1), #media movil 1
include.mean=TRUE, #la constante
fixed=c(NA,NA,0,0,NA),
xtransf=crest_135_D,
transfer=list(c(1,2)), #el 1 se debe a polinomio 1 denominador, polinomio 3 numerador
method="ML")
summary(mod)
tsdisplay(mod0$residuals) # no es ruido blanco, falta algo en el modelo
plot(mod0$coef[2:15], type = 'h', main = "Efecto de los 15 retardos")
summary(mod)
checkresiduals(arimax_model_colgate)
checkresiduals(arimax_model_crest)
mod.transf.colgate <- arimax(x = colgate_training,
order = c(0, 1 ,1),
xtransf = data.frame(crest_training), #atipico aditivo
transfer = list(c(0,0)), #primero el step y luego el pulse
method = "ML")
mod.transf.colgate
coeftest(mod.transf.colgate)
checkresiduals(mod.transf.colgate)
fventas.colgate = forecast(mod.transf.colgate, h = 16)
fventas.colgate = forecast(mod.transf.colgate)
mod.transf.colgate <- arimax(x = colgate_training,
order = c(1, 0 ,1),
xtransf = data.frame(crest_training), #atipico aditivo
transfer = list(c(0,0)), #primero el step y luego el pulse
method = "ML")
mod.transf.colgate
coeftest(mod.transf.colgate)
checkresiduals(mod.transf.colgate)
mod.transf.colgate <- arimax(x = colgate_training,
order = c(0, 1 ,1),
xtransf = data.frame(crest_training), #atipico aditivo
transfer = list(c(0,0)), #primero el step y luego el pulse
method = "ML")
mod.transf.colgate
coeftest(mod.transf.colgate)
checkresiduals(mod.transf.colgate)
plot(mod.transf.colgate$coef[2:15], type = 'h')
# utilizando el modelo arima:
Colgate.1963 <- forecast(fventas.colgate, h = 16) # colgate
knitr::opts_chunk$set(echo = TRUE)
data <- readxl::read_xlsx("data.xlsx")
head(data)
tail(data)
library(here) # Comentarios [//]:
library(dplyr)
library(janitor) # Limpieza de nombres
library(skimr) # Summary lindo
library(magrittr) #  %<>%
library(corrplot) # Grafico de correlaciones
library(ggcorrplot)  # Correlaciones con ggplot
library(PerformanceAnalytics) # Otra correlación
library(imputeTS) # na_mean() reemplaza nulos por la media
library(broom) # Modelos en df
library(flextable) # Tablas formateadas
library(mgcv) # Estimaciones GAM
library(reshape2) # Melt DF
library(prettydoc)
library(ggplot2)
library(forecast)
library(zoo)
library(TSA)
library(openxlsx)
library(xts)
library(lmtest)
library(Hmisc)
library(astsa)
library(tsoutliers)
library(fpp2)
skim(data)
colgate <- ts(data$Colgate, start = 1958, frequency = 52)
crest <- ts(data$Crest, start = 1958, frequency = 52)
mydata <- ts(data[,c(3,4)], start = 1958, frequency = 52)
#library(fpp2)
#Plot de Colgate
autoplot(colgate) +
ggtitle("Colgate Market Shares") +
xlab("Week") +
ylab("Market Share")
#Plot de Crest
autoplot(crest) +
ggtitle("Crest Market Shares") +
xlab("Week") +
ylab("Market Share")
# Plot de las series una abajo de la otra
autoplot(mydata, facets = TRUE)
#Plot con las dos series en el mismo grafico
autoplot(mydata, facets = FALSE) +
ggtitle("Cuotas de mercado de Crest y Colgate") +
xlab("Tiempo") +
ylab("Cuota de mercado")
#Tendremos que trabajar la columna de la fecha y las semanas
ventasCrest <- data$Crest
ventasColgate <- data$Colgate
generateDate <- seq(as.Date('1958/01/08'), as.Date('1963/04/23'), by = 'week')
xVentasCrest <- xts(ventasCrest, order.by = generateDate)
xVentasColgate <- xts(ventasColgate, order.by = generateDate)
#Vamos a pasarlo a trimestre para operar mejor
xVentasCrest <- to.weekly(xVentasCrest)
zVentasCrest <- as.zoo(xVentasCrest$xVentasCrest.Close)
xVentasColgate <- to.weekly(xVentasColgate)
zVentasColgate <- as.zoo(xVentasColgate$xVentasColgate.Close)
names(zVentasCrest) <- 'VentasMercado'
names(zVentasColgate) <- 'VentasMercado'
#Primera aproximacion
autoplot(zVentasCrest) + geom_point() +
ylab("Ventas")+ggtitle("Cuota semanal Crest")+xlab("Semanas") +
ggtitle('Serie Temporal de Ventas Crest')
#Primera aproximacion
autoplot(zVentasColgate) + geom_point() +
ylab("Ventas")+ggtitle("Cuota semanal Crest")+xlab("Semanas") +
ggtitle('Serie Temporal de Ventas Colgate')
ggtsdisplay(zVentasCrest)
ggtsdisplay(zVentasColgate)
set.seed(12345)
colgate_training <-  window(colgate, start = 1958,end = c(1962, 52))
crest_training <- window(crest, start = 1958, c(1962, 52))
colgate_test <- window(colgate, start = 1963)
crest_test <- window(crest, start = 1963)
training_data <- data[1:260,]
#Select number of observation to compare forecast
#Quitamos 16 semanas de 1963
cOmit = 16
#Data Size
nObs.Crest = length(zVentasCrest)
nObs.Colgate = length(zVentasColgate)
#sub_sample for Crest
#oVentasCrest=zCuotaCrest[1:(nObs-cOmit),]
oVentasCrest <- window(zVentasCrest, start = index(zVentasCrest[1]), end = index(zVentasCrest[nObs.Crest - cOmit]))
#out sample (real data to forecast performance)
pVentasCrest <- window(zVentasCrest,start=index(zVentasCrest[nObs.Crest-cOmit+1]),end=index(zVentasCrest[nObs.Crest]))
#sub_sample for Colgate
oVentasColgate <- window(zVentasColgate, start = index(zVentasColgate[1]), end = index(zVentasColgate[nObs.Colgate - cOmit]))
#out sample (real data to forecast performance)
pVentasColgate <- window(zVentasColgate,start=index(zVentasColgate[nObs.Colgate-cOmit+1]),end=index(zVentasColgate[nObs.Colgate]))
#ARIMA MODEL Automatic
fit1 = auto.arima(oVentasCrest) #cuando le ponemos autoarima estima el modelo ruido blanco.
fit2 = auto.arima(oVentasCrest, lambda = 0) #con transformacion logaritmo neperiano
fit3 = auto.arima(oVentasCrest, lambda = 0, approximation = F, stepwise = F)
fit4 = auto.arima(oVentasCrest, ic = 'aic', trace = T)
summary(fit1, fit2, fit3, fit4)
#ARIMA MODEL Automatic
fit1.Colgate = auto.arima(oVentasColgate) #cuando le ponemos autoarima estima el modelo ruido blanco.
fit2.Colgate = auto.arima(oVentasColgate, lambda = 0) #con transformacion logaritmo neperiano
fit3.Colgate = auto.arima(oVentasColgate, lambda = 0, approximation = F, stepwise = F)
fit4.Colgate = auto.arima(oVentasColgate, ic = 'aic', trace = T)
summary(fit1.Colgate, fit2.Colgate, fit3.Colgate, fit4.Colgate)
#residual analysis
ggtsdisplay(fit1$residuals)
ggtsdisplay(fit2$residuals)
ggtsdisplay(fit3$residuals)
ggtsdisplay(fit4$residuals)
ggtsdisplay(fit1.Colgate$residuals)
ggtsdisplay(fit2.Colgate$residuals)
ggtsdisplay(fit3.Colgate$residuals)
ggtsdisplay(fit4.Colgate$residuals)
#box-Ljung Test
#cmo el modelo estima 1 parametros fitdf=1
Box.test(fit1$residuals,lag=4, fitdf=1, type="Lj")
Box.test(fit1$residuals,lag=8, fitdf=1, type="Lj")
Box.test(fit1$residuals,lag=12, fitdf=1, type="Lj")
Box.test(fit1.Colgate$residuals,lag=4, fitdf=1, type="Lj")
Box.test(fit1.Colgate$residuals,lag=8, fitdf=1, type="Lj")
Box.test(fit1.Colgate$residuals,lag=12, fitdf=1, type="Lj")
#Forecast de Crest
fventas.crest = forecast(fit1, h=16)
plot(fventas.crest)
#Forecast de Colgate
fventas.colgate = forecast(fit1.Colgate, h = 16)
plot(fventas.colgate)
#Plot boxplot
#coredata() xts to vector
gData.Crest=data.frame(Date=time(fit1$residuals), fit1$residuals, check.names=FALSE, row.names=NULL)
gData.Colgate=data.frame(Date=time(fit1.Colgate$residuals), fit1.Colgate$residuals, check.names=FALSE, row.names=NULL)
#Boxplot de Crest
ggplot(gData.Crest) + geom_boxplot(aes(x = is.numeric(fit1$residuals), y = fit1$residuals),
outlier.colour="red", outlier.shape=16,outlier.size=2)+
xlab("")+ggtitle("Boxplot de Crest")
#Boxplot de Colgate
ggplot(gData.Colgate) + geom_boxplot(aes(x = is.numeric(fit1.Colgate$residuals), y = fit1.Colgate$residuals),
outlier.colour="red", outlier.shape=16,outlier.size=2)+
xlab("")+ggtitle("Boxplot de Colgate")
(colgate_outlier <- tso(colgate_training, types = c("TC", "AO", "LS", "IO", "SLS")))
plot(colgate_outlier)
summary(colgate_outlier)
(crest_outlier <- tso(crest_training, types = c("TC", "AO", "LS", "IO", "SLS")))
plot(crest_outlier)
summary(crest_outlier)
(outliers_colgate_idx <- colgate_outlier$outliers$ind)
(outliers_crest_idx <- crest_outlier$outliers$ind)
#ARIMAX Crest
arimax_model_crest <- arimax(crest_training,
order = c(0,1,1), #orden del ARIMA
xtransf = data.frame(I1 = (1*(seq(crest_training) == outliers_crest_idx))),  #matriz con 1 donde haya outliers y 0 en lo demás
transfer = list(c(0,0)), #porque p=0
method = 'ML')
summary(arimax_model_crest)
#ARIMAX Colgate
arimax_model_colgate <- arimax(colgate_training,
order = c(0,1,1), #orden del ARIMA
xtransf = data.frame(I1 = (1*(seq(crest_training) == outliers_colgate_idx))),  #matriz con 1 donde haya outliers y 0 en lo demás
transfer = list(c(0,0)), #porque p=0
method = 'ML')
summary(arimax_model_crest)
coeftest(arimax_model_crest)
coeftest(arimax_model_colgate)
checkresiduals(arimax_model_colgate)
checkresiduals(arimax_model_crest)
mod.transf.colgate <- arimax(x = colgate_training,
order = c(0, 1 ,1),
xtransf = data.frame(crest_training), #atipico aditivo
transfer = list(c(0,0)), #primero el step y luego el pulse
method = "ML")
mod.transf.colgate
coeftest(mod.transf.colgate)
checkresiduals(mod.transf.colgate)
